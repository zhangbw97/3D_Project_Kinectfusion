#include "common.h"
#include "SimpleMesh.h"

int triangle_table_host1[256][16] = {
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  8,  3,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  1,  9,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1,  8,  3,  9,  8,  1,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1,  2,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  8,  3,  1,  2,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {9,  2,  10, 0,  2,  9,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {2,  8,  3,  2,  10, 8,  10, 9,  8,  -1, -1, -1, -1, -1, -1, -1},
        {3,  11, 2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  11, 2,  8,  11, 0,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1,  9,  0,  2,  3,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1,  11, 2,  1,  9,  11, 9,  8,  11, -1, -1, -1, -1, -1, -1, -1},
        {3,  10, 1,  11, 10, 3,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  10, 1,  0,  8,  10, 8,  11, 10, -1, -1, -1, -1, -1, -1, -1},
        {3,  9,  0,  3,  11, 9,  11, 10, 9,  -1, -1, -1, -1, -1, -1, -1},
        {9,  8,  10, 10, 8,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4,  7,  8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4,  3,  0,  7,  3,  4,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  1,  9,  8,  4,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4,  1,  9,  4,  7,  1,  7,  3,  1,  -1, -1, -1, -1, -1, -1, -1},
        {1,  2,  10, 8,  4,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {3,  4,  7,  3,  0,  4,  1,  2,  10, -1, -1, -1, -1, -1, -1, -1},
        {9,  2,  10, 9,  0,  2,  8,  4,  7,  -1, -1, -1, -1, -1, -1, -1},
        {2,  10, 9,  2,  9,  7,  2,  7,  3,  7,  9,  4,  -1, -1, -1, -1},
        {8,  4,  7,  3,  11, 2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {11, 4,  7,  11, 2,  4,  2,  0,  4,  -1, -1, -1, -1, -1, -1, -1},
        {9,  0,  1,  8,  4,  7,  2,  3,  11, -1, -1, -1, -1, -1, -1, -1},
        {4,  7,  11, 9,  4,  11, 9,  11, 2,  9,  2,  1,  -1, -1, -1, -1},
        {3,  10, 1,  3,  11, 10, 7,  8,  4,  -1, -1, -1, -1, -1, -1, -1},
        {1,  11, 10, 1,  4,  11, 1,  0,  4,  7,  11, 4,  -1, -1, -1, -1},
        {4,  7,  8,  9,  0,  11, 9,  11, 10, 11, 0,  3,  -1, -1, -1, -1},
        {4,  7,  11, 4,  11, 9,  9,  11, 10, -1, -1, -1, -1, -1, -1, -1},
        {9,  5,  4,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {9,  5,  4,  0,  8,  3,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  5,  4,  1,  5,  0,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {8,  5,  4,  8,  3,  5,  3,  1,  5,  -1, -1, -1, -1, -1, -1, -1},
        {1,  2,  10, 9,  5,  4,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {3,  0,  8,  1,  2,  10, 4,  9,  5,  -1, -1, -1, -1, -1, -1, -1},
        {5,  2,  10, 5,  4,  2,  4,  0,  2,  -1, -1, -1, -1, -1, -1, -1},
        {2,  10, 5,  3,  2,  5,  3,  5,  4,  3,  4,  8,  -1, -1, -1, -1},
        {9,  5,  4,  2,  3,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  11, 2,  0,  8,  11, 4,  9,  5,  -1, -1, -1, -1, -1, -1, -1},
        {0,  5,  4,  0,  1,  5,  2,  3,  11, -1, -1, -1, -1, -1, -1, -1},
        {2,  1,  5,  2,  5,  8,  2,  8,  11, 4,  8,  5,  -1, -1, -1, -1},
        {10, 3,  11, 10, 1,  3,  9,  5,  4,  -1, -1, -1, -1, -1, -1, -1},
        {4,  9,  5,  0,  8,  1,  8,  10, 1,  8,  11, 10, -1, -1, -1, -1},
        {5,  4,  0,  5,  0,  11, 5,  11, 10, 11, 0,  3,  -1, -1, -1, -1},
        {5,  4,  8,  5,  8,  10, 10, 8,  11, -1, -1, -1, -1, -1, -1, -1},
        {9,  7,  8,  5,  7,  9,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {9,  3,  0,  9,  5,  3,  5,  7,  3,  -1, -1, -1, -1, -1, -1, -1},
        {0,  7,  8,  0,  1,  7,  1,  5,  7,  -1, -1, -1, -1, -1, -1, -1},
        {1,  5,  3,  3,  5,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {9,  7,  8,  9,  5,  7,  10, 1,  2,  -1, -1, -1, -1, -1, -1, -1},
        {10, 1,  2,  9,  5,  0,  5,  3,  0,  5,  7,  3,  -1, -1, -1, -1},
        {8,  0,  2,  8,  2,  5,  8,  5,  7,  10, 5,  2,  -1, -1, -1, -1},
        {2,  10, 5,  2,  5,  3,  3,  5,  7,  -1, -1, -1, -1, -1, -1, -1},
        {7,  9,  5,  7,  8,  9,  3,  11, 2,  -1, -1, -1, -1, -1, -1, -1},
        {9,  5,  7,  9,  7,  2,  9,  2,  0,  2,  7,  11, -1, -1, -1, -1},
        {2,  3,  11, 0,  1,  8,  1,  7,  8,  1,  5,  7,  -1, -1, -1, -1},
        {11, 2,  1,  11, 1,  7,  7,  1,  5,  -1, -1, -1, -1, -1, -1, -1},
        {9,  5,  8,  8,  5,  7,  10, 1,  3,  10, 3,  11, -1, -1, -1, -1},
        {5,  7,  0,  5,  0,  9,  7,  11, 0,  1,  0,  10, 11, 10, 0,  -1},
        {11, 10, 0,  11, 0,  3,  10, 5,  0,  8,  0,  7,  5,  7,  0,  -1},
        {11, 10, 5,  7,  11, 5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {10, 6,  5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  8,  3,  5,  10, 6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {9,  0,  1,  5,  10, 6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1,  8,  3,  1,  9,  8,  5,  10, 6,  -1, -1, -1, -1, -1, -1, -1},
        {1,  6,  5,  2,  6,  1,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1,  6,  5,  1,  2,  6,  3,  0,  8,  -1, -1, -1, -1, -1, -1, -1},
        {9,  6,  5,  9,  0,  6,  0,  2,  6,  -1, -1, -1, -1, -1, -1, -1},
        {5,  9,  8,  5,  8,  2,  5,  2,  6,  3,  2,  8,  -1, -1, -1, -1},
        {2,  3,  11, 10, 6,  5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {11, 0,  8,  11, 2,  0,  10, 6,  5,  -1, -1, -1, -1, -1, -1, -1},
        {0,  1,  9,  2,  3,  11, 5,  10, 6,  -1, -1, -1, -1, -1, -1, -1},
        {5,  10, 6,  1,  9,  2,  9,  11, 2,  9,  8,  11, -1, -1, -1, -1},
        {6,  3,  11, 6,  5,  3,  5,  1,  3,  -1, -1, -1, -1, -1, -1, -1},
        {0,  8,  11, 0,  11, 5,  0,  5,  1,  5,  11, 6,  -1, -1, -1, -1},
        {3,  11, 6,  0,  3,  6,  0,  6,  5,  0,  5,  9,  -1, -1, -1, -1},
        {6,  5,  9,  6,  9,  11, 11, 9,  8,  -1, -1, -1, -1, -1, -1, -1},
        {5,  10, 6,  4,  7,  8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4,  3,  0,  4,  7,  3,  6,  5,  10, -1, -1, -1, -1, -1, -1, -1},
        {1,  9,  0,  5,  10, 6,  8,  4,  7,  -1, -1, -1, -1, -1, -1, -1},
        {10, 6,  5,  1,  9,  7,  1,  7,  3,  7,  9,  4,  -1, -1, -1, -1},
        {6,  1,  2,  6,  5,  1,  4,  7,  8,  -1, -1, -1, -1, -1, -1, -1},
        {1,  2,  5,  5,  2,  6,  3,  0,  4,  3,  4,  7,  -1, -1, -1, -1},
        {8,  4,  7,  9,  0,  5,  0,  6,  5,  0,  2,  6,  -1, -1, -1, -1},
        {7,  3,  9,  7,  9,  4,  3,  2,  9,  5,  9,  6,  2,  6,  9,  -1},
        {3,  11, 2,  7,  8,  4,  10, 6,  5,  -1, -1, -1, -1, -1, -1, -1},
        {5,  10, 6,  4,  7,  2,  4,  2,  0,  2,  7,  11, -1, -1, -1, -1},
        {0,  1,  9,  4,  7,  8,  2,  3,  11, 5,  10, 6,  -1, -1, -1, -1},
        {9,  2,  1,  9,  11, 2,  9,  4,  11, 7,  11, 4,  5,  10, 6,  -1},
        {8,  4,  7,  3,  11, 5,  3,  5,  1,  5,  11, 6,  -1, -1, -1, -1},
        {5,  1,  11, 5,  11, 6,  1,  0,  11, 7,  11, 4,  0,  4,  11, -1},
        {0,  5,  9,  0,  6,  5,  0,  3,  6,  11, 6,  3,  8,  4,  7,  -1},
        {6,  5,  9,  6,  9,  11, 4,  7,  9,  7,  11, 9,  -1, -1, -1, -1},
        {10, 4,  9,  6,  4,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4,  10, 6,  4,  9,  10, 0,  8,  3,  -1, -1, -1, -1, -1, -1, -1},
        {10, 0,  1,  10, 6,  0,  6,  4,  0,  -1, -1, -1, -1, -1, -1, -1},
        {8,  3,  1,  8,  1,  6,  8,  6,  4,  6,  1,  10, -1, -1, -1, -1},
        {1,  4,  9,  1,  2,  4,  2,  6,  4,  -1, -1, -1, -1, -1, -1, -1},
        {3,  0,  8,  1,  2,  9,  2,  4,  9,  2,  6,  4,  -1, -1, -1, -1},
        {0,  2,  4,  4,  2,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {8,  3,  2,  8,  2,  4,  4,  2,  6,  -1, -1, -1, -1, -1, -1, -1},
        {10, 4,  9,  10, 6,  4,  11, 2,  3,  -1, -1, -1, -1, -1, -1, -1},
        {0,  8,  2,  2,  8,  11, 4,  9,  10, 4,  10, 6,  -1, -1, -1, -1},
        {3,  11, 2,  0,  1,  6,  0,  6,  4,  6,  1,  10, -1, -1, -1, -1},
        {6,  4,  1,  6,  1,  10, 4,  8,  1,  2,  1,  11, 8,  11, 1,  -1},
        {9,  6,  4,  9,  3,  6,  9,  1,  3,  11, 6,  3,  -1, -1, -1, -1},
        {8,  11, 1,  8,  1,  0,  11, 6,  1,  9,  1,  4,  6,  4,  1,  -1},
        {3,  11, 6,  3,  6,  0,  0,  6,  4,  -1, -1, -1, -1, -1, -1, -1},
        {6,  4,  8,  11, 6,  8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {7,  10, 6,  7,  8,  10, 8,  9,  10, -1, -1, -1, -1, -1, -1, -1},
        {0,  7,  3,  0,  10, 7,  0,  9,  10, 6,  7,  10, -1, -1, -1, -1},
        {10, 6,  7,  1,  10, 7,  1,  7,  8,  1,  8,  0,  -1, -1, -1, -1},
        {10, 6,  7,  10, 7,  1,  1,  7,  3,  -1, -1, -1, -1, -1, -1, -1},
        {1,  2,  6,  1,  6,  8,  1,  8,  9,  8,  6,  7,  -1, -1, -1, -1},
        {2,  6,  9,  2,  9,  1,  6,  7,  9,  0,  9,  3,  7,  3,  9,  -1},
        {7,  8,  0,  7,  0,  6,  6,  0,  2,  -1, -1, -1, -1, -1, -1, -1},
        {7,  3,  2,  6,  7,  2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {2,  3,  11, 10, 6,  8,  10, 8,  9,  8,  6,  7,  -1, -1, -1, -1},
        {2,  0,  7,  2,  7,  11, 0,  9,  7,  6,  7,  10, 9,  10, 7,  -1},
        {1,  8,  0,  1,  7,  8,  1,  10, 7,  6,  7,  10, 2,  3,  11, -1},
        {11, 2,  1,  11, 1,  7,  10, 6,  1,  6,  7,  1,  -1, -1, -1, -1},
        {8,  9,  6,  8,  6,  7,  9,  1,  6,  11, 6,  3,  1,  3,  6,  -1},
        {0,  9,  1,  11, 6,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {7,  8,  0,  7,  0,  6,  3,  11, 0,  11, 6,  0,  -1, -1, -1, -1},
        {7,  11, 6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {7,  6,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {3,  0,  8,  11, 7,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  1,  9,  11, 7,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {8,  1,  9,  8,  3,  1,  11, 7,  6,  -1, -1, -1, -1, -1, -1, -1},
        {10, 1,  2,  6,  11, 7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1,  2,  10, 3,  0,  8,  6,  11, 7,  -1, -1, -1, -1, -1, -1, -1},
        {2,  9,  0,  2,  10, 9,  6,  11, 7,  -1, -1, -1, -1, -1, -1, -1},
        {6,  11, 7,  2,  10, 3,  10, 8,  3,  10, 9,  8,  -1, -1, -1, -1},
        {7,  2,  3,  6,  2,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {7,  0,  8,  7,  6,  0,  6,  2,  0,  -1, -1, -1, -1, -1, -1, -1},
        {2,  7,  6,  2,  3,  7,  0,  1,  9,  -1, -1, -1, -1, -1, -1, -1},
        {1,  6,  2,  1,  8,  6,  1,  9,  8,  8,  7,  6,  -1, -1, -1, -1},
        {10, 7,  6,  10, 1,  7,  1,  3,  7,  -1, -1, -1, -1, -1, -1, -1},
        {10, 7,  6,  1,  7,  10, 1,  8,  7,  1,  0,  8,  -1, -1, -1, -1},
        {0,  3,  7,  0,  7,  10, 0,  10, 9,  6,  10, 7,  -1, -1, -1, -1},
        {7,  6,  10, 7,  10, 8,  8,  10, 9,  -1, -1, -1, -1, -1, -1, -1},
        {6,  8,  4,  11, 8,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {3,  6,  11, 3,  0,  6,  0,  4,  6,  -1, -1, -1, -1, -1, -1, -1},
        {8,  6,  11, 8,  4,  6,  9,  0,  1,  -1, -1, -1, -1, -1, -1, -1},
        {9,  4,  6,  9,  6,  3,  9,  3,  1,  11, 3,  6,  -1, -1, -1, -1},
        {6,  8,  4,  6,  11, 8,  2,  10, 1,  -1, -1, -1, -1, -1, -1, -1},
        {1,  2,  10, 3,  0,  11, 0,  6,  11, 0,  4,  6,  -1, -1, -1, -1},
        {4,  11, 8,  4,  6,  11, 0,  2,  9,  2,  10, 9,  -1, -1, -1, -1},
        {10, 9,  3,  10, 3,  2,  9,  4,  3,  11, 3,  6,  4,  6,  3,  -1},
        {8,  2,  3,  8,  4,  2,  4,  6,  2,  -1, -1, -1, -1, -1, -1, -1},
        {0,  4,  2,  4,  6,  2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1,  9,  0,  2,  3,  4,  2,  4,  6,  4,  3,  8,  -1, -1, -1, -1},
        {1,  9,  4,  1,  4,  2,  2,  4,  6,  -1, -1, -1, -1, -1, -1, -1},
        {8,  1,  3,  8,  6,  1,  8,  4,  6,  6,  10, 1,  -1, -1, -1, -1},
        {10, 1,  0,  10, 0,  6,  6,  0,  4,  -1, -1, -1, -1, -1, -1, -1},
        {4,  6,  3,  4,  3,  8,  6,  10, 3,  0,  3,  9,  10, 9,  3,  -1},
        {10, 9,  4,  6,  10, 4,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4,  9,  5,  7,  6,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  8,  3,  4,  9,  5,  11, 7,  6,  -1, -1, -1, -1, -1, -1, -1},
        {5,  0,  1,  5,  4,  0,  7,  6,  11, -1, -1, -1, -1, -1, -1, -1},
        {11, 7,  6,  8,  3,  4,  3,  5,  4,  3,  1,  5,  -1, -1, -1, -1},
        {9,  5,  4,  10, 1,  2,  7,  6,  11, -1, -1, -1, -1, -1, -1, -1},
        {6,  11, 7,  1,  2,  10, 0,  8,  3,  4,  9,  5,  -1, -1, -1, -1},
        {7,  6,  11, 5,  4,  10, 4,  2,  10, 4,  0,  2,  -1, -1, -1, -1},
        {3,  4,  8,  3,  5,  4,  3,  2,  5,  10, 5,  2,  11, 7,  6,  -1},
        {7,  2,  3,  7,  6,  2,  5,  4,  9,  -1, -1, -1, -1, -1, -1, -1},
        {9,  5,  4,  0,  8,  6,  0,  6,  2,  6,  8,  7,  -1, -1, -1, -1},
        {3,  6,  2,  3,  7,  6,  1,  5,  0,  5,  4,  0,  -1, -1, -1, -1},
        {6,  2,  8,  6,  8,  7,  2,  1,  8,  4,  8,  5,  1,  5,  8,  -1},
        {9,  5,  4,  10, 1,  6,  1,  7,  6,  1,  3,  7,  -1, -1, -1, -1},
        {1,  6,  10, 1,  7,  6,  1,  0,  7,  8,  7,  0,  9,  5,  4,  -1},
        {4,  0,  10, 4,  10, 5,  0,  3,  10, 6,  10, 7,  3,  7,  10, -1},
        {7,  6,  10, 7,  10, 8,  5,  4,  10, 4,  8,  10, -1, -1, -1, -1},
        {6,  9,  5,  6,  11, 9,  11, 8,  9,  -1, -1, -1, -1, -1, -1, -1},
        {3,  6,  11, 0,  6,  3,  0,  5,  6,  0,  9,  5,  -1, -1, -1, -1},
        {0,  11, 8,  0,  5,  11, 0,  1,  5,  5,  6,  11, -1, -1, -1, -1},
        {6,  11, 3,  6,  3,  5,  5,  3,  1,  -1, -1, -1, -1, -1, -1, -1},
        {1,  2,  10, 9,  5,  11, 9,  11, 8,  11, 5,  6,  -1, -1, -1, -1},
        {0,  11, 3,  0,  6,  11, 0,  9,  6,  5,  6,  9,  1,  2,  10, -1},
        {11, 8,  5,  11, 5,  6,  8,  0,  5,  10, 5,  2,  0,  2,  5,  -1},
        {6,  11, 3,  6,  3,  5,  2,  10, 3,  10, 5,  3,  -1, -1, -1, -1},
        {5,  8,  9,  5,  2,  8,  5,  6,  2,  3,  8,  2,  -1, -1, -1, -1},
        {9,  5,  6,  9,  6,  0,  0,  6,  2,  -1, -1, -1, -1, -1, -1, -1},
        {1,  5,  8,  1,  8,  0,  5,  6,  8,  3,  8,  2,  6,  2,  8,  -1},
        {1,  5,  6,  2,  1,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1,  3,  6,  1,  6,  10, 3,  8,  6,  5,  6,  9,  8,  9,  6,  -1},
        {10, 1,  0,  10, 0,  6,  9,  5,  0,  5,  6,  0,  -1, -1, -1, -1},
        {0,  3,  8,  5,  6,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {10, 5,  6,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {11, 5,  10, 7,  5,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {11, 5,  10, 11, 7,  5,  8,  3,  0,  -1, -1, -1, -1, -1, -1, -1},
        {5,  11, 7,  5,  10, 11, 1,  9,  0,  -1, -1, -1, -1, -1, -1, -1},
        {10, 7,  5,  10, 11, 7,  9,  8,  1,  8,  3,  1,  -1, -1, -1, -1},
        {11, 1,  2,  11, 7,  1,  7,  5,  1,  -1, -1, -1, -1, -1, -1, -1},
        {0,  8,  3,  1,  2,  7,  1,  7,  5,  7,  2,  11, -1, -1, -1, -1},
        {9,  7,  5,  9,  2,  7,  9,  0,  2,  2,  11, 7,  -1, -1, -1, -1},
        {7,  5,  2,  7,  2,  11, 5,  9,  2,  3,  2,  8,  9,  8,  2,  -1},
        {2,  5,  10, 2,  3,  5,  3,  7,  5,  -1, -1, -1, -1, -1, -1, -1},
        {8,  2,  0,  8,  5,  2,  8,  7,  5,  10, 2,  5,  -1, -1, -1, -1},
        {9,  0,  1,  5,  10, 3,  5,  3,  7,  3,  10, 2,  -1, -1, -1, -1},
        {9,  8,  2,  9,  2,  1,  8,  7,  2,  10, 2,  5,  7,  5,  2,  -1},
        {1,  3,  5,  3,  7,  5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  8,  7,  0,  7,  1,  1,  7,  5,  -1, -1, -1, -1, -1, -1, -1},
        {9,  0,  3,  9,  3,  5,  5,  3,  7,  -1, -1, -1, -1, -1, -1, -1},
        {9,  8,  7,  5,  9,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {5,  8,  4,  5,  10, 8,  10, 11, 8,  -1, -1, -1, -1, -1, -1, -1},
        {5,  0,  4,  5,  11, 0,  5,  10, 11, 11, 3,  0,  -1, -1, -1, -1},
        {0,  1,  9,  8,  4,  10, 8,  10, 11, 10, 4,  5,  -1, -1, -1, -1},
        {10, 11, 4,  10, 4,  5,  11, 3,  4,  9,  4,  1,  3,  1,  4,  -1},
        {2,  5,  1,  2,  8,  5,  2,  11, 8,  4,  5,  8,  -1, -1, -1, -1},
        {0,  4,  11, 0,  11, 3,  4,  5,  11, 2,  11, 1,  5,  1,  11, -1},
        {0,  2,  5,  0,  5,  9,  2,  11, 5,  4,  5,  8,  11, 8,  5,  -1},
        {9,  4,  5,  2,  11, 3,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {2,  5,  10, 3,  5,  2,  3,  4,  5,  3,  8,  4,  -1, -1, -1, -1},
        {5,  10, 2,  5,  2,  4,  4,  2,  0,  -1, -1, -1, -1, -1, -1, -1},
        {3,  10, 2,  3,  5,  10, 3,  8,  5,  4,  5,  8,  0,  1,  9,  -1},
        {5,  10, 2,  5,  2,  4,  1,  9,  2,  9,  4,  2,  -1, -1, -1, -1},
        {8,  4,  5,  8,  5,  3,  3,  5,  1,  -1, -1, -1, -1, -1, -1, -1},
        {0,  4,  5,  1,  0,  5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {8,  4,  5,  8,  5,  3,  9,  0,  5,  0,  3,  5,  -1, -1, -1, -1},
        {9,  4,  5,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4,  11, 7,  4,  9,  11, 9,  10, 11, -1, -1, -1, -1, -1, -1, -1},
        {0,  8,  3,  4,  9,  7,  9,  11, 7,  9,  10, 11, -1, -1, -1, -1},
        {1,  10, 11, 1,  11, 4,  1,  4,  0,  7,  4,  11, -1, -1, -1, -1},
        {3,  1,  4,  3,  4,  8,  1,  10, 4,  7,  4,  11, 10, 11, 4,  -1},
        {4,  11, 7,  9,  11, 4,  9,  2,  11, 9,  1,  2,  -1, -1, -1, -1},
        {9,  7,  4,  9,  11, 7,  9,  1,  11, 2,  11, 1,  0,  8,  3,  -1},
        {11, 7,  4,  11, 4,  2,  2,  4,  0,  -1, -1, -1, -1, -1, -1, -1},
        {11, 7,  4,  11, 4,  2,  8,  3,  4,  3,  2,  4,  -1, -1, -1, -1},
        {2,  9,  10, 2,  7,  9,  2,  3,  7,  7,  4,  9,  -1, -1, -1, -1},
        {9,  10, 7,  9,  7,  4,  10, 2,  7,  8,  7,  0,  2,  0,  7,  -1},
        {3,  7,  10, 3,  10, 2,  7,  4,  10, 1,  10, 0,  4,  0,  10, -1},
        {1,  10, 2,  8,  7,  4,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4,  9,  1,  4,  1,  7,  7,  1,  3,  -1, -1, -1, -1, -1, -1, -1},
        {4,  9,  1,  4,  1,  7,  0,  8,  1,  8,  7,  1,  -1, -1, -1, -1},
        {4,  0,  3,  7,  4,  3,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {4,  8,  7,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {9,  10, 8,  10, 11, 8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {3,  0,  9,  3,  9,  11, 11, 9,  10, -1, -1, -1, -1, -1, -1, -1},
        {0,  1,  10, 0,  10, 8,  8,  10, 11, -1, -1, -1, -1, -1, -1, -1},
        {3,  1,  10, 11, 3,  10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1,  2,  11, 1,  11, 9,  9,  11, 8,  -1, -1, -1, -1, -1, -1, -1},
        {3,  0,  9,  3,  9,  11, 1,  2,  9,  2,  11, 9,  -1, -1, -1, -1},
        {0,  2,  11, 8,  0,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {3,  2,  11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {2,  3,  8,  2,  8,  10, 10, 8,  9,  -1, -1, -1, -1, -1, -1, -1},
        {9,  10, 2,  0,  9,  2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {2,  3,  8,  2,  8,  10, 0,  1,  8,  1,  10, 8,  -1, -1, -1, -1},
        {1,  10, 2,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {1,  3,  8,  9,  1,  8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  9,  1,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {0,  3,  8,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
};

int number_vertices_table_host1[256] = {
        0,
        3,
        3,
        6,
        3,
        6,
        6,
        9,
        3,
        6,
        6,
        9,
        6,
        9,
        9,
        6,
        3,
        6,
        6,
        9,
        6,
        9,
        9,
        12,
        6,
        9,
        9,
        12,
        9,
        12,
        12,
        9,
        3,
        6,
        6,
        9,
        6,
        9,
        9,
        12,
        6,
        9,
        9,
        12,
        9,
        12,
        12,
        9,
        6,
        9,
        9,
        6,
        9,
        12,
        12,
        9,
        9,
        12,
        12,
        9,
        12,
        15,
        15,
        6,
        3,
        6,
        6,
        9,
        6,
        9,
        9,
        12,
        6,
        9,
        9,
        12,
        9,
        12,
        12,
        9,
        6,
        9,
        9,
        12,
        9,
        12,
        12,
        15,
        9,
        12,
        12,
        15,
        12,
        15,
        15,
        12,
        6,
        9,
        9,
        12,
        9,
        12,
        6,
        9,
        9,
        12,
        12,
        15,
        12,
        15,
        9,
        6,
        9,
        12,
        12,
        9,
        12,
        15,
        9,
        6,
        12,
        15,
        15,
        12,
        15,
        6,
        12,
        3,
        3,
        6,
        6,
        9,
        6,
        9,
        9,
        12,
        6,
        9,
        9,
        12,
        9,
        12,
        12,
        9,
        6,
        9,
        9,
        12,
        9,
        12,
        12,
        15,
        9,
        6,
        12,
        9,
        12,
        9,
        15,
        6,
        6,
        9,
        9,
        12,
        9,
        12,
        12,
        15,
        9,
        12,
        12,
        15,
        12,
        15,
        15,
        12,
        9,
        12,
        12,
        9,
        12,
        15,
        15,
        12,
        12,
        9,
        15,
        6,
        15,
        12,
        6,
        3,
        6,
        9,
        9,
        12,
        9,
        12,
        12,
        15,
        9,
        12,
        12,
        15,
        6,
        9,
        9,
        6,
        9,
        12,
        12,
        15,
        12,
        15,
        15,
        6,
        12,
        9,
        15,
        12,
        9,
        6,
        12,
        3,
        9,
        12,
        12,
        15,
        12,
        15,
        9,
        12,
        12,
        15,
        15,
        6,
        9,
        12,
        6,
        3,
        6,
        9,
        9,
        6,
        9,
        12,
        6,
        3,
        9,
        6,
        12,
        3,
        6,
        3,
        3,
        0,
};

using cv::cuda::GpuMat;

namespace cuda {

    //##### HELPERS #####
    __device__ __forceinline__
    float get_tsdf(const PtrStep<float2> tsdf_volume, const int3 volume_size,
                    const int x, const int y, const int z, float& weight)
    {
        float2 voxel_tuple = tsdf_volume.ptr(z * volume_size.y + y)[x];
        weight = voxel_tuple.y;
        return voxel_tuple.x;
    }

    __device__ __forceinline__
    int compute_cube_index(const PtrStep<float2> tsdf_volume, const int3 volume_size,
                           const int x, const int y, const int z, float tsdf_values[8])
    {
        float weight;
        int cube_index = 0; // calculate flag indicating if each vertex is inside or outside isosurface

        cube_index += static_cast<int>(tsdf_values[0] = get_tsdf(tsdf_volume, volume_size, x, y, z, weight) < 0.f);
        if (weight == 0) return 0;
        cube_index += static_cast<int>(tsdf_values[1] = get_tsdf(tsdf_volume, volume_size, x + 1, y, z, weight) < 0.f) << 1;
        if (weight == 0) return 0;
        cube_index += static_cast<int>(tsdf_values[2] = get_tsdf(tsdf_volume, volume_size, x + 1, y + 1, z, weight) < 0.f) << 2;
        if (weight == 0) return 0;
        cube_index += static_cast<int>(tsdf_values[3] = get_tsdf(tsdf_volume, volume_size, x, y + 1, z, weight) < 0.f) << 3;
        if (weight == 0) return 0;
        cube_index += static_cast<int>(tsdf_values[4] = get_tsdf(tsdf_volume, volume_size, x, y, z + 1, weight) < 0.f) << 4;
        if (weight == 0) return 0;
        cube_index += static_cast<int>(tsdf_values[5] = get_tsdf(tsdf_volume, volume_size, x + 1, y, z + 1, weight) < 0.f) << 5;
        if (weight == 0) return 0;
        cube_index += static_cast<int>(tsdf_values[6] = get_tsdf(tsdf_volume, volume_size, x + 1, y + 1, z + 1, weight) < 0.f) << 6;
        if (weight == 0) return 0;
        cube_index += static_cast<int>(tsdf_values[7] = get_tsdf(tsdf_volume, volume_size, x, y + 1, z + 1, weight) < 0.f) << 7;
        if (weight == 0) return 0;

        return cube_index;
    }

    __device__ __forceinline__
    float3 get_node_coordinates(const int x, const int y, const int z, const float voxel_size)
    {
        float3 position;

        position.x = (x + 0.5f) * voxel_size;
        position.y = (y + 0.5f) * voxel_size;
        position.z = (z + 0.5f) * voxel_size;

        return position;
    }

    __device__ __forceinline__
    float3 vertex_interpolate(const float3 p0, const float3 p1, const float f0, const float f1)
    {
        float t = (0.f - f0) / (f1 - f0 + 1e-15f);
        return make_float3(p0.x + t * (p1.x - p0.x),
                           p0.y + t * (p1.y - p0.y),
                           p0.z + t * (p1.z - p0.z));
    }

    __device__ __forceinline__
    uchar3 color_interpolate(const uchar3 c0, const uchar3 c1, const float f0, const float f1)
    {
        float t = (0.f - f0) / (f1 - f0 + 1e-15f);
        uchar3 c;

        c.x = static_cast<uchar>(c0.x + t * (c1.x - c0.x));
        c.y = static_cast<uchar>(c0.y + t * (c1.y - c0.y));
        c.z = static_cast<uchar>(c0.z + t * (c1.z - c0.z));
        return c;
    }


    //##### KERNELS #####
    __global__
    void get_export_kernel(const PtrStep<float2> tsdf_volume, const PtrStep<uchar3> color_volume,
                                    const int3 volume_size, const float voxel_scale,
                                    const PtrStepSz<int> number_vertices_table, const PtrStepSz<int> triangle_table,
                                    PtrStepSz<float3> vertex, PtrStepSz<uchar3> color, PtrStepSz<int> num, int* count)
    {

        const int x = threadIdx.x + blockIdx.x * blockDim.x;
        const int y = threadIdx.y + blockIdx.y * blockDim.y;

        if (x >= volume_size.x || y >= volume_size.y)
            return;

        // volatile __shared__ int warps_buffer[32]; // Number of threads / Warp size

        for (int z = 0; z < volume_size.z - 1; ++z) {
            int n_vertices = 0;
            int cube_index = 0;
            float tsdf_values[8];
            if (x + 1 < volume_size.x && y + 1 < volume_size.y) {
                cube_index = compute_cube_index(tsdf_volume, volume_size, x, y, z, tsdf_values);
                n_vertices = (cube_index == 0 || cube_index == 255) ? 0 : number_vertices_table.ptr(0)[cube_index];
            }

            int total = __popc(__ballot(n_vertices > 0));

            if (total == 0) {
                continue;
                // return;
             }

            float3 v[8];
            v[0] = get_node_coordinates(x, y, z, voxel_scale);
            v[1] = get_node_coordinates(x + 1, y, z, voxel_scale);
            v[2] = get_node_coordinates(x + 1, y + 1, z, voxel_scale);
            v[3] = get_node_coordinates(x, y + 1, z, voxel_scale);
            v[4] = get_node_coordinates(x, y, z + 1, voxel_scale);
            v[5] = get_node_coordinates(x + 1, y, z + 1, voxel_scale);
            v[6] = get_node_coordinates(x + 1, y + 1, z + 1, voxel_scale);
            v[7] = get_node_coordinates(x, y + 1, z + 1, voxel_scale);

            uchar3 c[8];
            c[0] = color_volume.ptr(z * volume_size.y + y)[x];
            c[1] = color_volume.ptr(z * volume_size.y + y)[x + 1];
            c[2] = color_volume.ptr(z * volume_size.y + y + 1)[x + 1];
            c[3] = color_volume.ptr(z * volume_size.y + y + 1)[x];
            c[4] = color_volume.ptr((z + 1) * volume_size.y + y)[x];
            c[5] = color_volume.ptr((z + 1) * volume_size.y + y)[x + 1];
            c[6] = color_volume.ptr((z + 1) * volume_size.y + y + 1)[x + 1];
            c[7] = color_volume.ptr((z + 1) * volume_size.y + y + 1)[x];


            float3 vertex_list[12];
            vertex_list[0] = vertex_interpolate(v[0], v[1], tsdf_values[0], tsdf_values[1]);
            vertex_list[1] = vertex_interpolate(v[1], v[2], tsdf_values[1], tsdf_values[2]);
            vertex_list[2] = vertex_interpolate(v[2], v[3], tsdf_values[2], tsdf_values[3]);
            vertex_list[3] = vertex_interpolate(v[3], v[0], tsdf_values[3], tsdf_values[0]);
            vertex_list[4] = vertex_interpolate(v[4], v[5], tsdf_values[4], tsdf_values[5]);
            vertex_list[5] = vertex_interpolate(v[5], v[6], tsdf_values[5], tsdf_values[6]);
            vertex_list[6] = vertex_interpolate(v[6], v[7], tsdf_values[6], tsdf_values[7]);
            vertex_list[7] = vertex_interpolate(v[7], v[4], tsdf_values[7], tsdf_values[4]);
            vertex_list[8] = vertex_interpolate(v[0], v[4], tsdf_values[0], tsdf_values[4]);
            vertex_list[9] = vertex_interpolate(v[1], v[5], tsdf_values[1], tsdf_values[5]);
            vertex_list[10] = vertex_interpolate(v[2], v[6], tsdf_values[2], tsdf_values[6]);
            vertex_list[11] = vertex_interpolate(v[3], v[7], tsdf_values[3], tsdf_values[7]);

            uchar3 color_list[12];
            color_list[0] = color_interpolate(c[0], c[1], tsdf_values[0], tsdf_values[1]);
            color_list[1] = color_interpolate(c[1], c[2], tsdf_values[1], tsdf_values[2]);
            color_list[2] = color_interpolate(c[2], c[3], tsdf_values[2], tsdf_values[3]);
            color_list[3] = color_interpolate(c[3], c[0], tsdf_values[3], tsdf_values[0]);
            color_list[4] = color_interpolate(c[4], c[5], tsdf_values[4], tsdf_values[5]);
            color_list[5] = color_interpolate(c[5], c[6], tsdf_values[5], tsdf_values[6]);
            color_list[6] = color_interpolate(c[6], c[7], tsdf_values[6], tsdf_values[7]);
            color_list[7] = color_interpolate(c[7], c[4], tsdf_values[7], tsdf_values[4]);
            color_list[8] = color_interpolate(c[0], c[4], tsdf_values[0], tsdf_values[4]);
            color_list[9] = color_interpolate(c[1], c[5], tsdf_values[1], tsdf_values[5]);
            color_list[10] = color_interpolate(c[2], c[6], tsdf_values[2], tsdf_values[6]);
            color_list[11] = color_interpolate(c[3], c[7], tsdf_values[3], tsdf_values[7]);

            for (int i = 0; i < total; i += 3) {

                const int v1 = triangle_table.ptr(0)[(cube_index * 16) + i + 0];
                const int v2 = triangle_table.ptr(0)[(cube_index * 16) + i + 1];
                const int v3 = triangle_table.ptr(0)[(cube_index * 16) + i + 2];

                vertex.ptr(z * volume_size.y + y)[x * 15 + i] = make_float3(vertex_list[v1].x,
                                                                            vertex_list[v1].y,
                                                                            vertex_list[v1].z);
                vertex.ptr(z * volume_size.y + y)[x * 15 + i + 1] = make_float3(vertex_list[v2].x,
                                                                                vertex_list[v2].y,
                                                                                vertex_list[v2].z);
                vertex.ptr(z * volume_size.y + y)[x * 15 + i + 2] = make_float3(vertex_list[v3].x,
                                                                                vertex_list[v3].y,
                                                                                vertex_list[v3].z);

                color.ptr(z * volume_size.y + y)[x * 15 + i] = make_uchar3(color_list[v1].x,
                                                                           color_list[v1].y,
                                                                           color_list[v1].z);
                color.ptr(z * volume_size.y + y)[x * 15 + i + 1] = make_uchar3(color_list[v2].x,
                                                                                color_list[v2].y,
                                                                                color_list[v2].z);
                color.ptr(z * volume_size.y + y)[x * 15 + i + 2] = make_uchar3(color_list[v3].x,
                                                                                color_list[v3].y,
                                                                                color_list[v3].z);
                num.ptr(z * volume_size.y + y)[x] = total / 3;
                count += total / 3;
            }
        }
    }


    int extract_mesh_new(const VolumeData& volume, cv::cuda::GpuMat& vertex, cv::cuda::GpuMat& color, cv::cuda::GpuMat& num)
    {
        // MeshData mesh_data(triangles_buffer_size / 3);

        GpuMat number_vertices_table, triangle_table;

        number_vertices_table = cv::cuda::createContinuous(256, 1, CV_32SC1);
        number_vertices_table.upload(cv::Mat(256, 1, CV_32SC1, number_vertices_table_host1, cv::Mat::AUTO_STEP));

        triangle_table = cv::cuda::createContinuous(256, 16, CV_32SC1);
        triangle_table.upload(cv::Mat(256, 16, CV_32SC1, triangle_table_host1, cv::Mat::AUTO_STEP));

        //# find voxel #
        dim3 threads(32, 32);
        dim3 blocks(static_cast<unsigned>(std::ceil(volume.volume_size.x / threads.x)),
                    static_cast<unsigned>(std::ceil(volume.volume_size.y / threads.y)));

        int count = 0;

        get_export_kernel<<<blocks, threads>>>(volume.tsdf_volume, volume.color_volume, volume.volume_size,
                volume.voxel_scale, number_vertices_table, triangle_table, vertex, color, num, &count);

        cudaDeviceSynchronize();

        return count;
    }
}